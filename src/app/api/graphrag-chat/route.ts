import { anthropic } from '@ai-sdk/anthropic';
import { streamText } from 'ai';

export async function POST(req: Request) {
  console.log('=== GRAPHRAG CHAT API DEBUG ===');
  console.log('API Key exists:', !!process.env.ANTHROPIC_API_KEY);
  console.log('API Key length:', process.env.ANTHROPIC_API_KEY?.length || 0);
  console.log('API Key starts with:', process.env.ANTHROPIC_API_KEY?.substring(0, 15) || 'N/A');
  
  try {
    const { messages, files } = await req.json();
    console.log('Messages received:', messages?.length || 0);
    console.log('Files received:', files?.length || 0);

    if (!process.env.ANTHROPIC_API_KEY) {
      console.error('Missing ANTHROPIC_API_KEY environment variable');
      return new Response(JSON.stringify({ 
        error: 'Anthropic API key not configured',
        details: 'Please set ANTHROPIC_API_KEY in your environment variables'
      }), { 
        status: 500, 
        headers: { 'Content-Type': 'application/json' } 
      });
    }

    let systemPrompt = `Voc√™ √© um especialista em GraphRAG (Graph-based Retrieval Augmented Generation) e sistemas de IA baseados em grafos de conhecimento. Seu expertise inclui:

## üîó **Grafos de Conhecimento:**
- Modelagem de entidades e relacionamentos
- Ontologias e taxonomias
- Bases de conhecimento estruturadas (Neo4j, ArangoDB, etc.)
- Algoritmos de grafos (PageRank, community detection, path finding)

## üß† **RAG Avan√ßado:**
- Retrieval Augmented Generation tradicional vs GraphRAG
- Embedding de grafos e representa√ß√£o vetorial de n√≥s
- T√©cnicas de retrieval baseadas em estrutura e sem√¢ntica
- Fus√£o de informa√ß√µes de m√∫ltiplos caminhos no grafo

## üèóÔ∏è **Arquiteturas GraphRAG:**
- Pipelines de processamento: Document ‚Üí Graph ‚Üí Retrieval ‚Üí Generation
- Integra√ß√£o com LLMs para gera√ß√£o aumentada por grafos
- Sistemas h√≠bridos (texto + grafo + vetorial)
- Frameworks: LangChain + Neo4j, Microsoft GraphRAG, etc.

## üìä **Casos de Uso:**
- Sistemas de recomenda√ß√£o baseados em grafos
- Q&A sobre dom√≠nios complexos e interconectados
- An√°lise de relacionamentos em grandes corpora
- Descoberta de conhecimento e insights ocultos

## üõ†Ô∏è **Implementa√ß√£o Pr√°tica:**
- Extra√ß√£o de entidades e relacionamentos de texto
- Constru√ß√£o automatizada de grafos de conhecimento
- Otimiza√ß√£o de queries em grafos para RAG
- M√©tricas de avalia√ß√£o espec√≠ficas para GraphRAG

Forne√ßa respostas t√©cnicas, pr√°ticas e com exemplos de c√≥digo quando apropriado. Foque em solu√ß√µes reais e implement√°veis.`;

    // Add file context if files are provided
    if (files && files.length > 0) {
      const fileContext = files.map((file: { name?: string; fileType?: string; summary?: string; rowCount?: number; columnCount?: number; content?: string }) => {
        let context = `\n\n**Arquivo: ${file.name}** (${file.fileType?.toUpperCase() || 'UNKNOWN'})`;
        
        if (file.summary) {
          context += `\nResumo: ${file.summary}`;
        }
        
        if (file.rowCount && file.columnCount) {
          context += `\nDimens√µes: ${file.rowCount} linhas x ${file.columnCount} colunas`;
        }
        
        if (file.content) {
          context += `\nConte√∫do (para an√°lise de grafos):\n${file.content.substring(0, 3000)}${file.content.length > 3000 ? '...' : ''}`;
        }
        
        return context;
      }).join('\n');
      
      systemPrompt += `\n\n**CONTEXTO DOS ARQUIVOS PARA AN√ÅLISE DE GRAFOS:**${fileContext}`;
      systemPrompt += `\n\n*Analise os arquivos fornecidos sob a perspectiva de extra√ß√£o de entidades, relacionamentos e poss√≠vel modelagem em grafos de conhecimento.*`;
    }

    console.log('System prompt length:', systemPrompt.length);
    console.log('System prompt preview:', systemPrompt.substring(0, 200) + '...');

    const result = await streamText({
      model: anthropic('claude-3-5-sonnet-20241022'),
      system: systemPrompt,
      messages,
      temperature: 0.7,
      maxTokens: 4096,
    });

    console.log('GraphRAG stream result created successfully');
    return result.toDataStreamResponse();

  } catch (error) {
    console.error('Detailed error in graphrag-chat API:', error);
    console.error('Error stack:', (error as Error).stack);
    
    return new Response(JSON.stringify({ 
      error: 'Internal server error in GraphRAG chat',
      details: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}