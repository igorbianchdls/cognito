import { convertToModelMessages, streamText, stepCountIs, UIMessage } from 'ai';
import * as testeTools from '@/tools/testeTools';

export const maxDuration = 30;

export async function POST(req: Request) {
  console.log('üß™ TESTE API: Request recebido!');
  
  const { messages }: { messages: UIMessage[] } = await req.json();
  console.log('üß™ TESTE API: Messages:', messages?.length);

  const result = streamText({
    model: 'openai/gpt-5-mini',
    
    // Sistema inicial b√°sico
    system: `Voc√™ √© um assistente de teste para workflow de 6 steps.
    
Voc√™ deve executar as ferramentas em sequ√™ncia conforme instru√≠do em cada step.`,
    
    messages: convertToModelMessages(messages),
    
    // PrepareStep: Define comportamento para cada um dos 6 steps
    prepareStep: ({ stepNumber, steps }) => {
      console.log(`üìä PREPARE STEP ${stepNumber}: Configurando comportamento`);
      
      switch (stepNumber) {
        case 1:
          console.log('üéØ STEP 1: Configurando para coleta de dados');
          return {
            system: `STEP 1/6: COLETA DE DADOS
            
Voc√™ deve executar a ferramenta 'coletarDados' para iniciar o processo.
            
Use par√¢metros apropriados:
- fonte: defina uma fonte de dados relevante
- periodo: opcional, mas recomendado
            
Ap√≥s executar, explique brevemente o que foi coletado.`
          };
          
        case 2:
          console.log('üéØ STEP 2: Configurando para processamento');
          return {
            system: `STEP 2/6: PROCESSAMENTO DE DADOS
            
Agora execute 'processarDados' usando os dados coletados no step anterior.
            
Use:
- dados: referencie os dados coletados
- metodo: escolha um m√©todo adequado
            
Explique brevemente o processamento realizado.`
          };
          
        case 3:
          console.log('üéØ STEP 3: Configurando para an√°lise de padr√µes');
          return {
            system: `STEP 3/6: AN√ÅLISE DE PADR√ïES
            
Execute 'analisarPadroes' nos dados processados.
            
Use:
- dadosProcessados: referencie dados do step anterior
- algoritmo: escolha algoritmo apropriado
            
Descreva os padr√µes encontrados.`
          };
          
        case 4:
          console.log('üéØ STEP 4: Configurando para gera√ß√£o de insights');
          return {
            system: `STEP 4/6: GERA√á√ÉO DE INSIGHTS
            
Execute 'gerarInsights' baseado nos padr√µes encontrados.
            
Use:
- padroes: referencie padr√µes do step anterior
- contexto: adicione contexto relevante
            
Explique os insights gerados.`
          };
          
        case 5:
          console.log('üéØ STEP 5: Configurando para cria√ß√£o de relat√≥rio');
          return {
            system: `STEP 5/6: CRIA√á√ÉO DE RELAT√ìRIO
            
Execute 'criarRelatorio' com todos os insights.
            
Use:
- insights: compile insights dos steps anteriores
- formato: escolha formato adequado
            
Descreva o relat√≥rio criado.`
          };
          
        case 6:
          console.log('üéØ STEP 6: Configurando para an√°lise final');
          const allSteps = steps;
          const executedTools: string[] = [];
          
          // Verifica quais tools foram executadas
          allSteps.forEach(step => {
            step.toolResults?.forEach(result => {
              if (!executedTools.includes(result.toolName)) {
                executedTools.push(result.toolName);
              }
            });
          });
          
          console.log('üîç Tools executadas at√© agora:', executedTools);
          
          return {
            system: `STEP 6/6: AN√ÅLISE FINAL OBRIGAT√ìRIA
            
IMPORTANTE: N√ÉO execute mais ferramentas. Forne√ßa apenas an√°lise textual.
            
Voc√™ deve fornecer uma an√°lise COMPLETA do workflow executado:
            
1. RESUMO DO PROCESSO: Descreva todas as etapas realizadas
2. RESULTADOS OBTIDOS: Compile todos os resultados importantes
3. INSIGHTS PRINCIPAIS: Liste os insights mais relevantes
4. CONCLUS√ïES: Forne√ßa conclus√µes baseadas em todo o processo
5. RECOMENDA√á√ïES: Sugira pr√≥ximos passos ou melhorias
            
A an√°lise deve ter pelo menos 200 palavras e ser detalhada.
            
Tools executadas: ${executedTools.join(', ')}`,
            tools: {} // Remove todas as tools no step final
          };
          
        default:
          console.log(`‚ö†Ô∏è STEP ${stepNumber}: Configura√ß√£o padr√£o`);
          return {};
      }
    },
    
    // StopWhen customizado para 6 steps
    stopWhen: [
      stepCountIs(6), // Limite m√°ximo de seguran√ßa
      (step) => {
        const currentStep = step.steps.length;
        console.log(`üîç STOP CHECK: Step atual ${currentStep}`);
        
        // Se chegou no step 6, verifica se an√°lise foi fornecida
        if (currentStep === 6) {
          const lastStep = step.steps[step.steps.length - 1];
          const hasAnalysis = lastStep?.text && lastStep.text.trim().length > 200;
          const hasNoToolCalls = !lastStep?.toolCalls || lastStep.toolCalls.length === 0;
          
          console.log(`üìä AN√ÅLISE CHECK: Texto: ${lastStep?.text?.length || 0} chars, Sem tools: ${hasNoToolCalls}`);
          
          if (hasAnalysis && hasNoToolCalls) {
            console.log('‚úÖ WORKFLOW COMPLETO: Parando no step 6 com an√°lise');
            return true;
          } else {
            console.log('‚è≥ AGUARDANDO: An√°lise insuficiente no step 6');
            return false;
          }
        }
        
        // Continua para steps < 6
        console.log(`üîÑ CONTINUANDO: Ainda no step ${currentStep}/6`);
        return false;
      }
    ],
    
    providerOptions: {
      openai: {
        reasoningSummary: 'detailed'
      }
    },
    
    // Tools simuladas para teste
    tools: {
      ...testeTools
    },
  });

  console.log('üß™ TESTE API: Retornando response...');
  return result.toUIMessageStreamResponse();
}