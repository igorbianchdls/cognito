import { addInsights } from '@/stores/widgets/insightsStore'
import { addAlertas } from '@/stores/widgets/alertasStore'
import { addRecomendacoes } from '@/stores/widgets/recomendacoesStore'

// Mock data para insights
const mockInsights = [
  {
    titulo: "Convers√µes aumentaram 15%",
    descricao: "Campanhas de retargeting no Instagram e Facebook mostraram excelente performance nas √∫ltimas 2 semanas.",
    dados: "CTR: 3.2% | CPM: R$12,50 | ROAS: 4.8x",
    importancia: 'alta' as const,
    source: 'optimization-test'
  },
  {
    titulo: "Bounce rate melhorou 8%",
    descricao: "Otimiza√ß√µes de UX implementadas na p√°gina inicial resultaram em maior engajamento e perman√™ncia dos usu√°rios.",
    dados: "Bounce rate: 42% vs 50% (m√™s anterior)",
    importancia: 'baixa' as const,
    source: 'optimization-test'
  },
  {
    titulo: "ROI do email marketing subiu 22%",
    descricao: "Segmenta√ß√£o mais precisa e subject lines personalizadas aumentaram significativamente as taxas de abertura.",
    dados: "Open rate: 28% | Click rate: 6.5% | ROI: 122%",
    importancia: 'media' as const,
    source: 'optimization-test'
  }
]

// Mock data para alertas
const mockAlertas = [
  {
    titulo: "Or√ßamento Google Ads pr√≥ximo do limite",
    descricao: "Campaign 'Black Friday 2024' est√° com 85% do or√ßamento consumido. Considere aumentar o budget ou pausar ads de baixa performance.",
    dados: "Gasto: R$8.500 / R$10.000 | CPA atual: R$45",
    acao: "Revisar palavras-chave com CPC alto e pausar an√∫ncios com CTR < 1%",
    nivel: 'critico' as const,
    source: 'optimization-test'
  },
  {
    titulo: "CTR do Facebook abaixo da m√©dia",
    descricao: "Campanha 'Promo√ß√£o Ver√£o' apresenta CTR de 0.8%, bem abaixo da m√©dia de 2.1% do segmento.",
    dados: "CTR: 0.8% vs 2.1% (benchmark) | Impress√µes: 45k",
    acao: "Testar novos criativos e revisar targeting de audi√™ncia",
    nivel: 'alto' as const,
    source: 'optimization-test'
  },
  {
    titulo: "Landing page com alta taxa de sa√≠da",
    descricao: "P√°gina de checkout est√° com 65% de abandono, indicando poss√≠veis problemas de UX ou performance.",
    dados: "Taxa de sa√≠da: 65% | Tempo na p√°gina: 1m23s",
    acao: "Implementar testes A/B no formul√°rio de checkout",
    nivel: 'medio' as const,
    source: 'optimization-test'
  }
]

// Mock data para recomenda√ß√µes
const mockRecomendacoes = [
  {
    titulo: "Implementar pixel de convers√£o avan√ßado",
    descricao: "Configurar tracking de eventos personalizados para melhor atribui√ß√£o e otimiza√ß√£o autom√°tica das campanhas.",
    impacto: 'alto' as const,
    facilidade: 'medio' as const,
    categoria: "Tracking",
    proximosPassos: ["Mapear eventos de convers√£o", "Configurar GTM", "Testar implementa√ß√£o", "Validar dados"],
    estimativaResultado: "Melhoria de 20-30% na otimiza√ß√£o de campanhas",
    source: 'optimization-test'
  },
  {
    titulo: "Sistema de reviews de produtos",
    descricao: "Permitir avalia√ß√µes e coment√°rios de clientes nos produtos para aumentar confian√ßa e convers√µes.",
    impacto: 'medio' as const,
    facilidade: 'facil' as const,
    categoria: "Social Proof",
    proximosPassos: ["Criar interface de review", "Sistema de modera√ß√£o", "Integrar com email", "Incentivar reviews"],
    estimativaResultado: "Aumento de 10-15% na confian√ßa do cliente",
    source: 'optimization-test'
  },
  {
    titulo: "Funcionalidade de wishlist",
    descricao: "Permitir que usu√°rios salvem produtos favoritos para compra futura, aumentando retorno e engajamento.",
    impacto: 'baixo' as const,
    facilidade: 'medio' as const,
    categoria: "Engajamento",
    proximosPassos: ["Desenhar interface", "Implementar persist√™ncia", "Email de lembrete", "An√°lise de uso"],
    estimativaResultado: "Aumento de 5-8% no retorno de usu√°rios",
    source: 'optimization-test'
  }
]

export function initializeMockData() {
  // S√≥ inicializa se os stores estiverem vazios
  if (typeof window !== 'undefined') {
    // Verificar se j√° tem dados nos stores
    const hasInsights = localStorage.getItem('cognito-insights')
    const hasAlertas = localStorage.getItem('cognito-alertas')
    const hasRecomendacoes = localStorage.getItem('cognito-recomendacoes')

    // Popular stores vazios com dados mockados
    if (!hasInsights) {
      console.log('üìä Initializing mock insights data...')
      addInsights(mockInsights)
    }

    if (!hasAlertas) {
      console.log('‚ö†Ô∏è Initializing mock alerts data...')
      addAlertas(mockAlertas)
    }

    if (!hasRecomendacoes) {
      console.log('üéØ Initializing mock recommendations data...')
      addRecomendacoes(mockRecomendacoes)
    }
  }
}